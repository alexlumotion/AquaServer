using UnityEngine;

[RequireComponent(typeof(Camera))]
public class TexturePainter : MonoBehaviour
{
    [Header("–¶—ñ–ª—å –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è")]
    public Renderer targetRenderer;               // –û–± º—î–∫—Ç, –Ω–∞ —è–∫–æ–º—É –º–∞–ª—é—î–º–æ
    public Texture2D originalTexture;             // –û—Ä–∏–≥—ñ–Ω–∞–ª (readonly)
    private Texture2D textureToPaint;             // –ö–ª–æ–Ω, –Ω–∞ —è–∫–æ–º—É –º–∞–ª—é—î–º–æ

    [Header("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ–Ω–∑–ª—è")]
    public Color brushColor = Color.red;
    [Range(1, 64)]
    public int brushSize = 8;

    [Header("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏")]
    public string paintableTag = "Paintable";

    private Camera mainCamera;

    void Start()
    {
        mainCamera = GetComponent<Camera>();
        InitChecks();
        CloneTexture();
        AssignTextureToMaterial();
        EnsureMeshCollider();
        //DrawTestArea(); // –º–æ–∂–Ω–∞ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É
    }

    void Update()
    {
        if (Input.GetMouseButton(0))
        {
            Debug.Log("üñ± –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –ª—ñ–≤–∞ –∫–Ω–æ–ø–∫–∞ –º–∏—à—ñ");
            TryPaintUnderCursor();
        }
    }

    // üß© –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    void InitChecks()
    {
        if (mainCamera == null)
            Debug.LogError("üö´ TexturePainter: –ö–∞–º–µ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.");

        if (originalTexture == null)
            Debug.LogError("üö´ TexturePainter: –ù–µ –≤–∫–∞–∑–∞–Ω–∞ originalTexture.");

        if (targetRenderer == null)
            Debug.LogError("üö´ TexturePainter: –ù–µ –≤–∫–∞–∑–∞–Ω–æ Renderer.");
    }

    // üß¨ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É—Ä–∏
    void CloneTexture()
    {
        textureToPaint = new Texture2D(
            originalTexture.width,
            originalTexture.height,
            TextureFormat.RGBA32,
            false
        );

        textureToPaint.SetPixels(originalTexture.GetPixels());
        textureToPaint.Apply();

        Debug.Log($"üß¨ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª–æ–Ω —Ç–µ–∫—Å—Ç—É—Ä–∏ '{originalTexture.name}' ‚Üí '{textureToPaint.name}'");
    }

    // üé® –ü—Ä–∏–≤ º—è–∑–∫–∞ –∫–ª–æ–Ω—É –¥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É
    void AssignTextureToMaterial()
    {
        targetRenderer.material.mainTexture = textureToPaint;
        Debug.Log("‚úÖ –ü—Ä–∏–≤ º—è–∑–∞–Ω–æ textureToPaint –¥–æ material.mainTexture");
    }

    // üß© MeshCollider setup
    void EnsureMeshCollider()
    {
        MeshCollider meshCol = targetRenderer.GetComponent<MeshCollider>();
        MeshFilter meshFilt = targetRenderer.GetComponent<MeshFilter>();

        if (meshCol != null && meshFilt != null && meshCol.sharedMesh == null)
        {
            meshCol.sharedMesh = meshFilt.sharedMesh;
            Debug.Log("üß© MeshCollider.mesh –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑ MeshFilter.sharedMesh");
        }
    }

    // üéØ –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –º–∏—à—ñ —Ç–∞ –º–∞–ª—é–≤–∞–Ω–Ω—è
    void TryPaintUnderCursor()
    {
        Ray ray = mainCamera.ScreenPointToRay(Input.mousePosition);
        if (Physics.Raycast(ray, out RaycastHit hit))
        {
            Debug.Log($"üéØ –ü–æ—Ç—Ä–∞–ø–∏–ª–∏ –≤: {hit.collider.name}");
            Debug.DrawRay(ray.origin, ray.direction * hit.distance, Color.green, 2f);
            Debug.Log($"üß≠ UV hit: {hit.textureCoord}");

            Renderer rend = hit.collider.GetComponent<Renderer>();
            if (rend == targetRenderer)
            {
                Debug.Log("‚úÖ –°–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –∑ —Ü—ñ–ª—å–æ–≤–∏–º Renderer ‚Äî –º–∞–ª—é—î–º–æ...");
                PaintAtUV(hit.textureCoord);
            }
            else
            {
                Debug.LogWarning("‚ö†Ô∏è –ü–æ—Ç—Ä–∞–ø–∏–ª–∏ –≤ —ñ–Ω—à–∏–π Renderer");
            }
        }
        else
        {
            Debug.Log("üî≠ Raycast –Ω–µ –ø–æ—Ç—Ä–∞–ø–∏–≤ –Ω—ñ –≤ —â–æ");
        }
    }

    // üñå –ú–∞–ª—é–≤–∞–Ω–Ω—è –ø–æ UV
    void PaintAtUV(Vector2 uv)
    {
        int x = Mathf.RoundToInt(uv.x * textureToPaint.width);
        int y = Mathf.RoundToInt(uv.y * textureToPaint.height);

        Debug.Log($"üé® –ú–∞–ª—é—î–º–æ –≤ UV: ({uv.x:0.000}, {uv.y:0.000}) ‚Üí Pixel: ({x}, {y})");

        float sqrRadius = brushSize * brushSize;

        for (int i = -brushSize; i <= brushSize; i++)
        {
            for (int j = -brushSize; j <= brushSize; j++)
            {
                if (i * i + j * j <= sqrRadius)
                {
                    int px = x + i;
                    int py = y + j;

                    if (px >= 0 && py >= 0 && px < textureToPaint.width && py < textureToPaint.height)
                    {
                        textureToPaint.SetPixel(px, py, brushColor);
                    }
                }
            }
        }

        textureToPaint.Apply();
        Debug.Log("üñå –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∑–º—ñ–Ω–∏ –¥–æ —Ç–µ–∫—Å—Ç—É—Ä–∏");
    }

    // üß™ –ó–∞–∫—Ä–∞—Å–∏—Ç–∏ –≤–µ—Ä—Ö–Ω—ñ–π –ª—ñ–≤–∏–π –∫—É—Ç ‚Äî –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
    void DrawTestArea()
    {
        for (int x = 0; x < 200; x++)
        {
            for (int y = 0; y < 200; y++)
            {
                textureToPaint.SetPixel(x, y, Color.magenta);
            }
        }
        textureToPaint.Apply();
        Debug.Log("üü™ –ó–∞–∫—Ä–∞—Å–∏–ª–∏ –≤–µ—Ä—Ö–Ω—ñ–π –ª—ñ–≤–∏–π –∫—É—Ç —É magenta ‚Äî —Ç–µ—Å—Ç");
    }
}
